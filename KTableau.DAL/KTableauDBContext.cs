using System;
using KTableau.DAL.models;
using Microsoft.EntityFrameworkCore;
using NLog;


namespace KTableau.DAL
{
    public class KTableauDBContext : DbContext
    {   

        // All tables DBContext has to control under
        public DbSet<User> Users { get; set; }
        public DbSet<Transition> Transitions { get; set; }
        public DbSet<Team> Teams { get; set; }
        public DbSet<Task> Tasks { get; set; }
        public DbSet<Project> Projects { get; set; }
        public DbSet<Note> Notes { get; set; }


        // :base is the Java's 'super'
        public KTableauDBContext(DbContextOptions<KTableauDBContext> options) : base(options)
        {  
            
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            // Connection string
            optionsBuilder.UseSqlServer(@"Server=(localdb)\mssqllocaldb;Database=KTableau");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            // Fluent API (PK, indexes, relations and rowverion)

            // Entity User (autogenerated)
            modelBuilder.Entity<User>().HasKey(p => p.UserId);
            modelBuilder.Entity<User>().HasIndex(p => p.UserName).IsUnique();
            modelBuilder.Entity<User>().Property(p => p.UserId).ValueGeneratedOnAdd();            
            modelBuilder.Entity<User>().Property(p => p.RowVersion).IsRowVersion().ValueGeneratedOnAddOrUpdate();
                       
            // Entity Transition
            modelBuilder.Entity<Transition>().HasKey(p => p.TransitionId);
            modelBuilder.Entity<Transition>().HasIndex(p => p.State);
            modelBuilder.Entity<Transition>().Property(p => p.TransitionId).ValueGeneratedOnAdd();
            modelBuilder.Entity<Transition>().Property(p => p.RowVersion).IsRowVersion().ValueGeneratedOnAddOrUpdate();

            // Entity Team
            modelBuilder.Entity<Team>().HasKey(p => new { p.UserId, p.ProjectId });
            modelBuilder.Entity<Team>().Property(p => p.RowVersion).IsRowVersion().ValueGeneratedOnAddOrUpdate();

            // Entity Task
            modelBuilder.Entity<Task>().HasKey(p => p.TaskId);
            modelBuilder.Entity<Task>().HasIndex(p => p.ProjectId);
            modelBuilder.Entity<Task>().HasIndex(p => p.State);
            modelBuilder.Entity<Task>().Property(p => p.TaskId).ValueGeneratedOnAdd();
            modelBuilder.Entity<Task>().Property(p => p.RowVersion).IsRowVersion().ValueGeneratedOnAddOrUpdate();

            // Entity Project
            modelBuilder.Entity<Project>().HasKey(p => p.ProjectId);
            modelBuilder.Entity<Project>().Property(p => p.ProjectId).ValueGeneratedOnAdd();
            modelBuilder.Entity<Project>().Property(p => p.RowVersion).IsRowVersion().ValueGeneratedOnAddOrUpdate();

            // Entity Note
            modelBuilder.Entity<Note>().HasKey(p => p.NoteId);
            modelBuilder.Entity<Note>().HasIndex(p => p.TaskId);
            modelBuilder.Entity<Note>().Property(p => p.NoteId).ValueGeneratedOnAdd();
            modelBuilder.Entity<Note>().Property(p => p.RowVersion).IsRowVersion().ValueGeneratedOnAddOrUpdate();












        }
    }
}
